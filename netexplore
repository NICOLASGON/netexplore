#!/usr/bin/python3

from pylxd import Client
import sys
import json
import time
import os
import warnings
from graphviz import Graph

warnings.filterwarnings("ignore")

client = Client()

def load_json_file(path):
    json_file = None
    with open(path) as config_file:
        json_file = json.load(config_file)
    return json_file

def create_network(net):
    if not client.networks.exists(net['name']):
        client.networks.create(net['name'], type='bridge')

def delete_network(net):
    if client.networks.exists(net['name']):
        network = client.networks.get(net['name'])
        network.delete()

def create_machine(machine):

    # Load template configuration
    template_config = load_json_file('templates/{}/template.json'.format(machine['template']))

    # Create or recreate the container if it exists
    if client.instances.exists(machine['name']):
        container = client.instances.get(machine['name'])
        container.stop()
        container.delete()

    config = {
        'name': machine['name'],
        'type': 'container',
        'source': {
            'type': 'image',
            'alias': template_config['image']
        }
    }
    container = client.instances.create(config, wait=True)

    # Create interfaces from config file
    if_num = 1
    for interface in machine['interfaces']:

        if not 'ipv4' in interface:
            interface['ipv4'] = ""

        if not 'ipv6' in interface:
            interface['ipv6'] = ""

        interface_name = "eth" + str(if_num)

        container.devices.update({
            interface_name: {
                "parent": interface['name'],
                "nictype": "bridged",
                "type": "nic",
                "name": interface_name,
            }
        })

        if_num += 1

    # Save configuration
    container.save(wait=True)

    # Mount template and custom directories
    template_dir = os.path.dirname(os.path.realpath(sys.modules['__main__'].__file__))
    container.files.recursive_put(template_dir + "/templates", "/mnt/templates")
    custom_dir = os.path.realpath(project_path)
    container.files.recursive_put(custom_dir + "/custom", "/mnt/custom")

    # Start the container
    container.start(wait=True)

    # Execute init scripts from template and customization
    container.execute(["/bin/sh", "/mnt/templates/{}/provisioning.sh".format(machine['template'])])
    if os.path.isfile('{}/custom/{}.sh'.format(custom_dir, machine['name'])):
        container.execute(["/bin/sh", "/mnt/custom/{}.sh".format(machine['name'])])

def delete_machine(machine):
    if not client.instances.exists(machine['name']):
        return

    container = client.instances.get(machine['name'])
    try:
        container.stop(force=True, wait=True)
    except:
        pass
    container.delete()

def create_graph(config):
    g = Graph('G', filename='process.gv', engine='sfdp')

    # Graph networks
    g.attr('node', shape='ellipse')
    for net in config['networks']:
        g.node(net['name'])

    # Graph machine and link with networks
    g.attr('node', shape='box')
    for machine in config['machines']:

        if_list = ''
        for interface in machine['interfaces']:
            if 'ipv4' in interface:
                if_list = if_list + '\n' + interface['ipv4']
            if 'ipv6' in interface:
                if_list = if_list + '\n' + interface['ipv6']

        g.node(machine['name'], label='{} {}'.format(machine['name'], if_list))

        for interface in machine['interfaces']:
            g.edge(interface['name'], machine['name'])

    g.view()

if __name__ == '__main__':
    
    project_path = sys.argv[2]
    config = load_json_file('{}/config.json'.format(project_path))

    if sys.argv[1] == "start":
    
        for net in config['networks']:
            create_network(net)

        for machine in config['machines']:
            create_machine(machine)
    
    elif sys.argv[1] == "stop":

        for machine in config['machines']:
            delete_machine(machine)

        time.sleep(5)

        for net in config['networks']:
            delete_network(net)

    elif sys.argv[1] == "graph":

        create_graph(config)
